# Generated by Django 4.2.7 on 2025-09-17 12:38

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone




def _fix_company_created_by(apps):
    try:
        Company = apps.get_model('core_hr', 'Company')
        User = apps.get_model('auth', 'User')
        for c in Company.objects.all().only('id', 'created_by_id'):
            created_by_id = getattr(c, 'created_by_id', None)
            invalid = False
            if created_by_id is None:
                invalid = False
            elif not isinstance(created_by_id, int):
                invalid = True
            elif not User.objects.filter(id=created_by_id).exists():
                invalid = True
            if invalid:
                # Set to NULL to satisfy FK
                setattr(c, 'created_by_id', None)
                c.save(update_fields=['created_by'])
    except Exception:
        # Be forgiving: if historical model lacks created_by, skip
        pass

class Migration(migrations.Migration):

    dependencies = [
        ('core_hr', '0004_auto_sync_database'),
    ]

    operations = [
        # Clean invalid FK in existing data (SQLite-friendly): set invalid created_by to NULL
        migrations.RunPython(
            code=lambda apps, schema_editor: _fix_company_created_by(apps),
            reverse_code=migrations.RunPython.noop,
        ),
        migrations.AddField(
            model_name='department',
            name='is_active',
            field=models.BooleanField(default=True),
        ),
        migrations.AddField(
            model_name='department',
            name='updated_at',
            field=models.DateTimeField(auto_now=True),
        ),
        migrations.AddField(
            model_name='employee',
            name='created_at',
            field=models.DateTimeField(auto_now_add=True, default=django.utils.timezone.now),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='employee',
            name='updated_at',
            field=models.DateTimeField(auto_now=True),
        ),
        migrations.CreateModel(
            name='BiometricDevice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('brand', models.CharField(default='ZKTeco', max_length=50)),
                ('model', models.CharField(blank=True, max_length=100)),
                ('serial_number', models.CharField(blank=True, max_length=100)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('port', models.PositiveIntegerField(default=4370)),
                ('timezone', models.CharField(default='UTC', max_length=64)),
                ('api_key', models.CharField(help_text='Shared secret for device push/auth', max_length=128)),
                ('webhook_secret', models.CharField(blank=True, help_text='Optional secret for cloud webhook HMAC', max_length=128)),
                ('cloud_endpoint_url', models.URLField(blank=True)),
                ('push_enabled', models.BooleanField(default=True)),
                ('is_active', models.BooleanField(default=True)),
                ('last_seen', models.DateTimeField(blank=True, null=True)),
                ('last_pull', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='biometric_devices', to='core_hr.company')),
            ],
            options={
                'ordering': ['company', 'name'],
            },
        ),
        migrations.CreateModel(
            name='BiometricUserMap',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('device_user_id', models.CharField(help_text='ID on the device (enrolled ID)', max_length=100)),
                ('global_user_id', models.CharField(blank=True, help_text='Cloud/global user ID if applicable', max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='biometric_user_maps', to='core_hr.company')),
                ('device', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_maps', to='core_hr.biometricdevice')),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='biometric_ids', to='core_hr.employee')),
            ],
            options={
                'indexes': [models.Index(fields=['company', 'device', 'device_user_id'], name='core_hr_bio_company_469e7f_idx'), models.Index(fields=['company', 'global_user_id'], name='core_hr_bio_company_0da414_idx')],
                'unique_together': {('company', 'device', 'device_user_id')},
            },
        ),
        migrations.CreateModel(
            name='BiometricEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('device_user_id', models.CharField(max_length=100)),
                ('event_type', models.CharField(choices=[('checkin', 'Check In'), ('checkout', 'Check Out'), ('unknown', 'Unknown')], default='unknown', max_length=20)),
                ('timestamp', models.DateTimeField()),
                ('external_event_id', models.CharField(blank=True, max_length=128)),
                ('raw_payload', models.JSONField(blank=True, default=dict)),
                ('processed', models.BooleanField(default=False)),
                ('dedupe_hash', models.CharField(max_length=64, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('attendance', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='biometric_events', to='core_hr.attendance')),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='biometric_events', to='core_hr.company')),
                ('device', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='events', to='core_hr.biometricdevice')),
            ],
            options={
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['company', 'timestamp'], name='core_hr_bio_company_6dd98a_idx'), models.Index(fields=['company', 'device_user_id', 'timestamp'], name='core_hr_bio_company_8a2296_idx'), models.Index(fields=['processed'], name='core_hr_bio_process_fc8e8a_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='biometricdevice',
            index=models.Index(fields=['company', 'serial_number'], name='core_hr_bio_company_8a9ba0_idx'),
        ),
        migrations.AddIndex(
            model_name='biometricdevice',
            index=models.Index(fields=['company', 'ip_address'], name='core_hr_bio_company_1aa21d_idx'),
        ),
        migrations.AddIndex(
            model_name='biometricdevice',
            index=models.Index(fields=['company', 'is_active'], name='core_hr_bio_company_ccb90a_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='biometricdevice',
            unique_together={('company', 'serial_number')},
        ),
    ]
